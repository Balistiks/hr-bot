version: '3.7'

services:
  nginx:
    image: nginx:alpine
    restart: always
    volumes:
      - './conf/nginx:/etc/nginx:ro'
      - '.conf/nginx/nginx.conf:/etc/nginx/nginx.conf'
    networks:
      bot:
        aliases:
          - nginx
    ports:
      - '80:80'
      - "443:443"
  training-bot:
    build:
      context: training-bot
      dockerfile: ../buildfiles/bot.dockerfile
    restart: always
    env_file:
      - .env
    volumes:
      - ./training-bot/training-bot:/app/training-bot
    depends_on:
      - redis
    networks:
      bot:
        aliases:
          - bot
  bot:
    build:
      context: bot
      dockerfile: ../buildfiles/bot.dockerfile
    restart: always
    env_file:
      - .env
    volumes:
      - ./bot/bot:/app/bot
    depends_on:
      - redis
    networks:
      bot:
        aliases:
          - bot
  redis:
    image: redis:alpine
    restart: always
    ports:
      - 6379:6379
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    volumes:
      - ./cache:/data
    networks:
      bot:
        aliases:
          - redis
  webapp:
    build:
      context: ./webapp
      dockerfile: ../buildfiles/webapp.dockerfile
    restart: always
    networks:
      bot:
        aliases:
          - webapp
    env_file:
      - .env
    ports:
      - '8080:8080'
    volumes:
      - './webapp/src:/app/src'
    depends_on:
      - back
      - nginx
  back:
    build:
      context: back
      dockerfile: ../buildfiles/back.dockerfile
      target: development
    restart: always
    environment:
      POSTGRES_PASSWORD: '${POSTGRES_PASSWORD}'
      POSTGRES_USER: '${POSTGRES_USER}'
      POSTGRES_DB: '${POSTGRES_DB}'
      SECRET_TOKEN: '${SECRET_TOKEN}'
    volumes:
      - ./back/src:/app/src
    ports:
      - '3000:3000'
    depends_on:
      - db
    networks:
      bot:
        aliases:
          - back
  db:
    image: postgres:alpine
    restart: always
    ports:
      - '5432:5432'
    volumes:
      - './data/db:/var/lib/pgdata/data'
    environment:
      POSTGRES_PASSWORD: '${POSTGRES_PASSWORD}'
      POSTGRES_USER: '${POSTGRES_USER}'
      POSTGRES_DB: '${POSTGRES_DB}'
      TZ: 'Asia/Vladivostok'
    networks:
      bot:
        aliases:
          - db

networks:
  bot:
    driver: bridge
